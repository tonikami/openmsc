<!DOCTYPE html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Angular Material style sheet -->
    <link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/angular_material/1.1.0/angular-material.min.css">
    <link rel="stylesheet" href="/stylesheets/style.css">

    <link rel="stylesheet" href="https://slimseun.com/js/vendor/angular-gridster/angular-gridster.min.css">

</head>

<body ng-app="musicCollab" ng-cloak>
    <div ng-controller="AppCtrl" ng-cloak>




        <!-- Play Forward Rewind -->
        <md-grid-list md-cols-xs="3" md-cols-sm="3" md-cols-md="3" md-cols-gt-md="3" md-row-height-gt-md="2:1" md-row-height="1:1" md-gutter="12px" md-gutter-gt-sm="1px">

            <md-grid-tile class="white">
                <ng-md-icon icon="fast_rewind" style="fill: pink" size="100"></ng-md-icon>
            </md-grid-tile>

            <md-grid-tile class="white">
                <ng-md-icon icon="play_circle_outline" style="fill: pink" size="100" ng-click="playAudio()"></ng-md-icon>
            </md-grid-tile>

            <md-grid-tile class="white">
                <ng-md-icon icon="fast_forward" style="fill: pink" size="100"></ng-md-icon>
            </md-grid-tile>



        </md-grid-list>


        <md-slider-container style="margin: 30px;" flex>
            <md-input-container>
                <input flex type="number" ng-model="vol" aria-label="tempo" aria-controls="volume-slider">
            </md-input-container>
            <md-slider ng-model="vol" min="0.5" max="4" aria-label="tempo" id="volume-slider" class="md-accent" md-horizontol md-range></md-slider>
            <h5>Tempo</h5>
        </md-slider-container>
        <!-- Block Layers -->
        <md-content style="background:darkred" ng-repeat="layer in layers track by $index" md-theme="docs-dark" layout="row" layout-align="center center" layout-padding>
            <div layout="column" layout-align="center center" flex="10" style="margin: 10px;">
                <ng-md-icon icon="keyboard_arrow_up" ng-click="voteUp($index)" ng-style="layer.votedUp && {'fill': 'pink'}"></ng-md-icon>
                <md-button class="md-icon-button md-primary" aria-label="Settings">{{layer.votes}}</md-button>
                <ng-md-icon icon="keyboard_arrow_down" ng-click="voteDown($index)" ng-style="layer.votedUp != null && !layer.votedUp && {'fill': 'pink'}" style="margin-top: 4px;"></ng-md-icon>
            </div>
            <div gridster="gridsterOptsLayer" style="background:darkred" flex="90">
                <ul>
                    <li gridster-item="note" ng-repeat="note in layer.notes track by $index" ng-class="note.color">
                    </li>
                </ul>
            </div>
        </md-content>

        <md-button style="background: red" ng-if="justAdded==true" ng-click="addBlock($event)">Add Button</md-button>
        <div gridster="gridsterOpts" style="background:darkred" ng-if="justAdded==true">
            <ul>
                <li gridster-item="note" ng-repeat="note in currentLayer.notes track by $index" ng-class="note.color" ng-click="showTabDialog($event, $index)">
                    <ng-md-icon icon="drag_handle"> </ng-md-icon>
                </li>
            </ul>
        </div>

        <!-- Add/Submit Button -->
        <ng-md-icon icon="add_circle_outline" style="fill: pink" size="100" layout="row" layout-align="center" ng-if="justAdded==false" ng-click="addLayer()"></ng-md-icon>
        <ng-md-icon icon="file_upload" style="fill: pink" size="100" layout="row" layout-align="center" ng-if="justAdded==true" ng-click="submitLayer()"></ng-md-icon>

    </div>


    <!-- Angular Material requires Angular.js Libraries -->
    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular.min.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular-animate.min.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular-aria.min.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular-messages.min.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular-resource.js"></script>


    <!-- Angular Material Library -->
    <script src="http://ajax.googleapis.com/ajax/libs/angular_material/1.1.0/angular-material.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/angular-material-icons/0.7.1/angular-material-icons.min.js"></script>
    <script src="/ngWebAudio/src/ngWebAudio.js"></script>
    <script src="/shared/SoundPlayer.js"></script>


    <!-- Grid Stuff -->
    <script src="https://slimseun.com/js/vendor/angular-gridster/angular-gridster.min.js"></script>

    <!-- Your application bootstrap  -->
    <script type="text/javascript">
        var musicCollab = angular.module('musicCollab', ['ngMaterial', 'ngMdIcons', 'ngResource', 'gridster', 'sound.player']);

        musicCollab.factory("Increment_Vote", function($resource) {
            return $resource('/api/:layerid/vote/increment', {
                layerid: '@layerid'
            });
        });

        musicCollab.factory("Decrement_Vote", function($resource) {
            return $resource('/api/:layerid/vote/decrement', {
                layerid: '@layerid'
            });
        });

        musicCollab.factory("Layers", function($resource) {
            return $resource('/api/layers')
        });

        musicCollab.factory("Upload_Layer", function($resource) {
            return $resource('/api/upload/layer')
        });
        musicCollab.controller('AppCtrl', function($scope, $mdDialog, $q, $mdToast, Increment_Vote, Decrement_Vote, Layers, Upload_Layer, SoundPlayerService) {
            $scope.editable = true;
            $scope.splitFactor = 50;
            $scope.vol = 1;
            $scope.justAdded = false;
            $scope.layers = [];
            $scope.currentLayer = null;

            $scope.init = function() {

                var testNotes = [{
                        x: 0,
                        length: 4,
                        path: "fs.wav"
                    },
                    {
                        x: 0,
                        length: 4,
                        path: "a.wav"
                    },
                    {
                        x: 0,
                        length: 4,
                        path: "cs.wav"
                    },
                    {
                        x: 4,
                        length: 4,
                        path: "d.wav"
                    },
                    {
                        x: 4,
                        length: 4,
                        path: "fs.wav"
                    },
                    {
                        x: 4,
                        length: 4,
                        path: "a.wav"
                    },
                    {
                        x: 8,
                        length: 4,
                        path: "a.wav"
                    },
                    {
                        x: 8,
                        length: 4,
                        path: "cs.wav"
                    },
                    {
                        x: 8,
                        length: 4,
                        path: "e.wav"
                    },
                    {
                        x: 12,
                        length: 4,
                        path: "e.wav"
                    },
                    {
                        x: 12,
                        length: 4,
                        path: "gs.wav"
                    },
                    {
                        x: 12,
                        length: 4,
                        path: "b.wav"
                    },
                ];

                SoundPlayerService.play(testNotes, 20, 150);

                Layers.query(function(response) {
                    for (var i = 0; i < response.length; i++) {
                        for (var j = 0; j < response[i].notes.length; j++) {
                            response[i].notes[j].sizeX = response[i].notes[j].duration;
                            response[i].notes[j].col = response[i].notes[j].start;
                            response[i].notes[j].row = 1;
                            response[i].notes[j].sizeY = 1;
                        }

                    }
                    $scope.layers = response;
                });

            }
            $scope.init();


            $scope.gridsterOpts = {
                minRows: 1, // the minimum height of the grid, in rows
                maxRows: 1,
                columns: $scope.splitFactor, // the width of the grid, in columns
                colWidth: 'auto', // can be an integer or 'auto'.  'auto' uses the pixel width of the element divided by 'columns'
                rowHeight: '100', // can be an integer or 'match'.  Match uses the colWidth, giving you square widgets.
                margins: [10, 1], // the pixel distance between each widget
                defaultSizeX: 1, // the default width of a gridster item, if not specifed
                defaultSizeY: 1, // the default height of a gridster item, if not specified
                mobileBreakPoint: 1, // if the screen is not wider that this, remove the grid layout and stack the items
                pushing: false,
                swapping: true,
                resizable: {
                    enabled: true,
                    start: function(event, uiWidget, $element) {}, // optional callback fired when resize is started,
                    resize: function(event, uiWidget, $element) {}, // optional callback fired when item is resized,
                    stop: function(event, uiWidget, $element) {
                        $scope.editable = false;
                    } // optional callback fired when item is finished resizing
                },
                draggable: {
                    enabled: true, // whether dragging items is supported
                    handle: '.ddd', // optional selector for resize handle
                    start: function(event, uiWidget, $element) {}, // optional callback fired when drag is started,
                    drag: function(event, uiWidget, $element) {}, // optional callback fired when item is moved,
                    stop: function(event, uiWidget, $element) {
                        $scope.editable = false;
                    } // optional callback fired when item is finished dragging
                }
            };

            $scope.gridsterOptsLayer = {
                minRows: 1, // the minimum height of the grid, in rows
                maxRows: 1,
                columns: $scope.splitFactor, // the width of the grid, in columns
                colWidth: 'auto', // can be an integer or 'auto'.  'auto' uses the pixel width of the element divided by 'columns'
                rowHeight: '100', // can be an integer or 'match'.  Match uses the colWidth, giving you square widgets.
                margins: [10, 1], // the pixel distance between each widget
                defaultSizeX: 1, // the default width of a gridster item, if not specifed
                defaultSizeY: 1, // the default height of a gridster item, if not specified
                mobileBreakPoint: 1, // if the screen is not wider that this, remove the grid layout and stack the items
                resizable: {
                    enabled: false,
                    start: function(event, uiWidget, $element) {}, // optional callback fired when resize is started,
                    resize: function(event, uiWidget, $element) {}, // optional callback fired when item is resized,
                    stop: function(event, uiWidget, $element) {
                        $scope.editable = false;
                    } // optional callback fired when item is finished resizing
                },
                draggable: {
                    enabled: false, // whether dragging items is supported
                    handle: '.ddd', // optional selector for resize handle
                    start: function(event, uiWidget, $element) {}, // optional callback fired when drag is started,
                    drag: function(event, uiWidget, $element) {}, // optional callback fired when item is moved,
                    stop: function(event, uiWidget, $element) {
                        $scope.editable = false;
                    } // optional callback fired when item is finished dragging
                }
            };

            $scope.increaseSplitFactor = function() {
                if ($scope.splitFactor != 5) {
                    $scope.splitFactor++;
                    $scope.updateGrid();
                }
            }
            $scope.decreaseSplitFactor = function() {
                if ($scope.splitFactor != 1) {
                    $scope.splitFactor--;
                    $scope.updateGrid();
                }
            }

            $scope.addLayer = function() {
                $scope.currentLayer = {
                    notes: [],
                    votedUp: null,
                };

                $scope.justAdded = true;
            };

            $scope.submitLayer = function() {
                //$scope.layers.push($scope.currentLayer);
                $scope.justAdded = false;
                Upload_Layer.save({}, {
                    notes: $scope.currentLayer.notes,
                }).$promise.then(function() {
                    $mdToast.show(
                        $mdToast.simple()
                        .textContent("Succesfully Added")
                        .position("bottom")
                        .hideDelay(3000)
                    );
                    $scope.currentLayer = null;
                    $scope.init();
                });
            }


            $scope.voteUp = function(index) {
                if ($scope.layers[index].votedUp == null) {
                    $scope.layers[index].votes++;
                    Increment_Vote.get({
                        layerid: $scope.layers[index]._id
                    });
                    $scope.layers[index].votedUp = true;
                } else if (!$scope.layers[index].votedUp) {
                    $scope.layers[index].votes++;
                    $scope.layers[index].votes++;
                    Increment_Vote.get({
                        layerid: $scope.layers[index]._id
                    });
                    Increment_Vote.get({
                        layerid: $scope.layers[index]._id
                    });
                    $scope.layers[index].votedUp = true;
                } else if ($scope.layers[index].votedUp) {
                    $scope.layers[index].votes--;
                    $scope.layers[index].votedUp = null;
                    Decrement_Vote.get({
                        layerid: $scope.layers[index]._id
                    });
                }
            }

            $scope.voteDown = function(index) {
                if ($scope.layers[index].votedUp == null) {
                    $scope.layers[index].votes--;
                    Decrement_Vote.get({
                        layerid: $scope.layers[index]._id
                    });
                    $scope.layers[index].votedUp = false;
                } else if ($scope.layers[index].votedUp) {
                    $scope.layers[index].votes--;
                    $scope.layers[index].votes--;
                    Decrement_Vote.get({
                        layerid: $scope.layers[index]._id
                    });
                    Decrement_Vote.get({
                        layerid: $scope.layers[index]._id
                    });
                    $scope.layers[index].votedUp = false;
                } else if (!$scope.layers[index].votedUp) {
                    $scope.layers[index].votes++;
                    $scope.layers[index].votedUp = null;
                    Increment_Vote.get({
                        layerid: $scope.layers[index]._id
                    });
                }
            }

            $scope.addBlock = function(ev) {
                $scope.showTabDialog(ev, -1);
            }

            $scope.endPositionCurrLayer = function() {
                if ($scope.currentLayer.notes.length == 0) {
                    return 0;
                }
                var furthestStart = -1;
                var furthestStartIndex = -1;
                for (var i = 0; i < $scope.currentLayer.notes.length; i++) {
                    var currStart = $scope.currentLayer.notes[i].start;
                    if (currStart > furthestStart) {
                        furthestStart = currStart;
                        furthestStartIndex = i;
                    }
                }
                var start = $scope.currentLayer.notes[furthestStartIndex].start + $scope.currentLayer.notes[furthestStartIndex].duration;
                return start;
            }

            $scope.showTabDialog = function(ev, index) {
                if ($scope.editable) {
                    $mdDialog.show({
                            controller: editBlockController,
                            locals: {
                                currentLayer: $scope.currentLayer,
                                index: index
                            },
                            templateUrl: '/html/editBlock.html',
                            parent: angular.element(document.body),
                            targetEvent: ev,
                            clickOutsideToClose: false
                        })
                        .then(function(response) {
                            if (index != -1) {
                                $scope.currentLayer.notes[index].color = response.color;
                                $scope.currentLayer.notes[index].path = response.notesName;
                            } else {
                                notes = {
                                    sizeX: 1,
                                    path: response.notesName,
                                    color: response.color
                                };
                                $scope.currentLayer.notes.push(notes);
                            }
                        });
                } else {
                    $scope.editable = true;
                }
            }
        });




        <!-- Controller for edit block popup -->
        function editBlockController($scope, $mdDialog, currentLayer, index) {
            $scope.currentLayer = currentLayer;
            $scope.index = index;
            $scope.color;
            $scope.notesName;

            $scope.init = function() {
                if ($scope.index != -1) {
                    $scope.color = $scope.currentLayer.notes[$scope.index].color;
                    $scope.notesName = $scope.currentLayer.notes[$scope.index].path;
                }
            }
            $scope.init();


            $scope.select = function(color, notesName) {
                if (color != 'brown') {
                    $scope.color = color;
                    $scope.notesName = notesName;
                    $scope.getAudio(notesName).play();
                } else {
                    var customSound = document.getElementById('soundFile');
                    temp.addEventListener('change', function() {;
                        console.log('done');
                    });
                }
            };

            $scope.cancel = function() {
                $mdDialog.cancel();
            };

            $scope.save = function() {
                var audio = $scope.getAudio($scope.notesName);
                if ($scope.color) {
                    $mdDialog.hide({
                        color: $scope.color,
                        notesName: $scope.notesName
                    });
                }
            };

            $scope.getAudio = function(notesName) {
                var sound;
                if ($scope.notesName == 'silent') {
                    sound = new Audio('audio/silent.wav');
                } else if ($scope.notesName == 'c') {
                    sound = new Audio('audio/c.wav');
                } else if ($scope.notesName == 'c#') {
                    sound = new Audio('audio/csharp.wav');
                } else if ($scope.notesName == 'd') {
                    sound = new Audio('audio/d.wav');
                } else if ($scope.notesName == 'd#') {
                    sound = new Audio('audio/dsharp.wav');
                } else if ($scope.notesName == 'e') {
                    sound = new Audio('audio/e.wav');
                } else if ($scope.notesName == 'f') {
                    sound = new Audio('audio/f.wav');
                } else if ($scope.notesName == 'f#') {
                    sound = new Audio('audio/fsharp.wav');
                } else if ($scope.notesName == 'g') {
                    sound = new Audio('audio/g.wav');
                } else if ($scope.notesName == 'g#') {
                    sound = new Audio('audio/gsharp.wav');
                } else if ($scope.notesName == 'a') {
                    sound = new Audio('audio/a.wav');
                } else if ($scope.notesName == 'a#') {
                    sound = new Audio('audio/asharp.wav');
                } else if ($scope.notesName == 'b') {
                    sound = new Audio('audio/b.wav');
                } else {

                }
                return sound;
            }
        };

    </script>

</body>

</html>
